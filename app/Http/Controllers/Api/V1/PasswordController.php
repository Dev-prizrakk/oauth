<?php

namespace App\Http\Controllers\Api\V1;

use App\Http\Controllers\Controller;
use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Str;
use Carbon\Carbon;

class PasswordController extends Controller
{
    // –®–∞–≥ 1: –ó–∞–ø—Ä–æ—Å —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è (–æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞)
    public function forgot(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'email' => 'required|email|exists:users,email',
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 422);
        }

        $token = Str::random(64);

        DB::table('password_resets')->updateOrInsert(
            ['email' => $request->email],
            [
                'token' => Hash::make($token),
                'created_at' => now(),
            ]
        );

        // üîπ –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ ‚Äî —Ç—É—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞, –∞ –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω–µ–º —Ç–æ–∫–µ–Ω:
        return response()->json([
            'message' => '–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.',
            'token' => $token, // –¢–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∞ ‚Äî –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω!
        ]);
    }

    // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    public function tokenCheck(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'email' => 'required|email',
            'token' => 'required|string',
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 422);
        }

        $record = DB::table('password_resets')->where('email', $request->email)->first();

        if (!$record) {
            return response()->json(['error' => '–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–±—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'], 404);
        }

        if (!Hash::check($request->token, $record->token)) {
            return response()->json(['error' => '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω'], 400);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è (1 —á–∞—Å)
        if (Carbon::parse($record->created_at)->addHour()->isPast()) {
            return response()->json(['error' => '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫'], 400);
        }

        return response()->json(['message' => '–¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω']);
    }

    // –®–∞–≥ 3: –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
    public function reset(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'email' => 'required|email|exists:users,email',
            'token' => 'required|string',
            'password' => 'required|string|min:6|confirmed',
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 422);
        }

        $record = DB::table('password_resets')->where('email', $request->email)->first();

        if (!$record || !Hash::check($request->token, $record->token)) {
            return response()->json(['error' => '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ email'], 400);
        }

        if (Carbon::parse($record->created_at)->addHour()->isPast()) {
            return response()->json(['error' => '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫'], 400);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
        $user = User::where('email', $request->email)->first();
        $user->update(['password' => Hash::make($request->password)]);

        // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω
        DB::table('password_resets')->where('email', $request->email)->delete();

        return response()->json(['message' => '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω']);
    }
}
